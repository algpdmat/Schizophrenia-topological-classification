# -*- coding: utf-8 -*-
"""
Main script to demonstrate the usage of functions for topological classification in schizophrenia.
Author: André Luiz de Góes Pacheco, postdoctoral researcher at iLIKA-UFRPE.

This work was published in the article:
Pacheco, A. L. G. (2024). Topological classification in schizophrenia. Brazilian Journal of Health Review.
https://ojs.brazilianjournals.com.br/ojs/index.php/BJHR/article/view/68803
"""

import networkx as nx
import matplotlib.pyplot as plt
from classification import calculate_graph_metrics, classify_group
from visualization import calculate_and_visualize_forman_ricci_curvature, calculate_and_visualize_top10_centralities

def main():
    # Create a sample graph
    G = nx.Graph()

    # Add nodes
    G.add_nodes_from(range(1, 11))

    # Add edges with weights
    edges = [
        (1, 2, 0.6), (1, 3, 0.2), (1, 4, 0.8), 
        (2, 3, 0.4), (2, 5, 0.9), (3, 4, 0.3), 
        (3, 6, 0.5), (4, 7, 0.7), (5, 6, 0.2),
        (5, 8, 0.6), (6, 9, 0.1), (7, 8, 0.4),
        (7, 10, 0.9), (8, 9, 0.3), (9, 10, 0.7)
    ]

    G.add_weighted_edges_from(edges)

    # Calculate graph metrics
    metrics = calculate_graph_metrics(G)
    print("Graph Metrics:")
    print(metrics)

    # Classify the graph
    group = classify_group(G)
    print(f"The graph is classified as group: {group}")

    # Visualize Forman-Ricci Curvature
    print("Visualizing Forman-Ricci Curvature...")
    calculate_and_visualize_forman_ricci_curvature(G)

    # Visualize Top 10 Centralities
    print("Visualizing Top 10 Centralities...")
    calculate_and_visualize_top10_centralities(G)

if __name__ == "__main__":
    main()
