# -*- coding: utf-8 -*-
"""
Script for topological classification in schizophrenia.
Author: André Luiz de Góes Pacheco, postdoctoral researcher at iLIKA-UFRPE.

This work was published in the article:
Pacheco, A. L. G. (2024). Topological classification in schizophrenia. Brazilian Journal of Health Review.
https://ojs.brazilianjournals.com.br/ojs/index.php/BJHR/article/view/68803
"""

import networkx as nx
import numpy as np

def calculate_graph_metrics(graph):
    """
    Calculates various centrality metrics for a graph.

    Parameters:
    graph (nx.Graph): A NetworkX graph.

    Returns:
    dict: A dictionary containing the mean centralities of degree, betweenness, eigenvector, and closeness.
    """
    degree_centrality = np.mean(list(nx.degree_centrality(graph).values()))
    betweenness_centrality = np.mean(list(nx.betweenness_centrality(graph).values()))
    eigenvector_centrality = np.mean(list(nx.eigenvector_centrality_numpy(graph).values()))
    closeness_centrality = np.mean(list(nx.closeness_centrality(graph).values()))

    return {
        "Degree Centrality": degree_centrality,
        "Betweenness Centrality": betweenness_centrality,
        "Eigenvector Centrality": eigenvector_centrality,
        "Closeness Centrality": closeness_centrality
    }

def classify_group(graph):
    """
    Classifies a graph into one of the predefined groups based on centrality metrics.

    Parameters:
    graph (nx.Graph): A NetworkX graph.

    Returns:
    str: The name of the most likely group.
    """
    # Group data embedded in the function
    group_data = {
        "CE": {"Modularity": (0.50, 0.68), "Degree Centrality Mean": 0.047841, "Betweenness Centrality Mean": 0.092061, "Eigenvector Centrality Mean": 0.091057, "Closeness Centrality Mean": 0.200616},
        "CEL": {"Modularity": (0.52, 0.70), "Degree Centrality Mean": 0.050714, "Betweenness Centrality Mean": 0.101915, "Eigenvector Centrality Mean": 0.096371, "Closeness Centrality Mean": 0.194611},
        "CN": {"Modularity": (0.49, 0.67), "Degree Centrality Mean": 0.056246, "Betweenness Centrality Mean": 0.121311, "Eigenvector Centrality Mean": 0.104998, "Closeness Centrality Mean": 0.199179}
    }

    # Calculate the graph's metrics
    metrics = calculate_graph_metrics(graph)

    # Compare metrics with each group
    most_probable_group = None
    smallest_difference = float('inf')

    for group, values in group_data.items():
        difference = sum(abs(metrics[metric] - values[metric + " Mean"]) for metric in metrics)

        # Update the most probable group if the difference is smaller
        if difference < smallest_difference:
            smallest_difference = difference
            most_probable_group = group

    return most_probable_group

